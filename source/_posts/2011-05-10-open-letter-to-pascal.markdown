---
title: "Open Letter to Pascal"
kind: article
created_at: 2011-05-10 23:00:00 UTC
author: Steven Deobald
layout: post
---
My friend Pascal recently asked me what books I would recommend he read to learn the basics of programming. He'd been looking into it for a while but simply couldn't decide where to start, given the multitude of programming books available.<br /><br /><div>I'd be the last to claim I've swum a majority of the book lagoon, but I have found over the years that the majority of programming books are neither timeless nor all that well-written. Pascal's response seems obvious, in retrospect: if I could start it all over, what would I read?</div><div><br /></div><div>In Pascal's case, I'd recommend <a href="http://mitpress.mit.edu/sicp/"><i>The Structure and Interpretation of Computer Programs</i></a>. As a Math teacher, he should find the calculus-based examples in the early chapters relatively easy -- if not downright intuitive. SICP is easily the richest and most thoughtful programming book I've ever read. Were it not for all the math it assumed familiar to the reader, I'd recommend it to everyone above and beyond all other texts in the discipline.</div><div><br /></div><div>For everyone else (myself included), I'd put <a href="http://www.ccs.neu.edu/home/matthias/BTLS/"><i>The Little Schemer</i></a> at the top of the list, quickly followed by <i>The Seasoned Schemer</i> and <i>The Reasoned Schemer</i>. The books are a joy to read thanks to their peculiar style and between them convey many of the ideas SICP presents as a more traditional academic text.</div><div><br /></div><div><span class="Apple-style-span">Why not <i>Learn to Program</i> or <i>Learn Java in 21 Days</i>?</span></div><div><br /></div><div> Most introductory programming books and online tutorials (even Why the Lucky Stiff's <i>Poignant Guide to Ruby</i>, in all its humour and beauty) make a grave mistake in their introduction to programming: They misrepresent syntax as the first principle of writing code.</div><div><br /></div><div>If the first chapter of your introductory literature explains the representation of strings and numbers in [insert-your-language-of-choice-here], you've already started your reader off on the wrong foot. Worse yet, there's a temptation to teach new programmers about variables, mutation of state, and side-effects -- such as printing to the console.</div><div><br /></div><div>One does not require dozens of books and years of practice to understand the essence of writing software. But in my case, it took as much to unlearn the bad habits taught by my first texts.</div><div class="author">
  <img src="http://nilenso.com/people/steven-200.png" style="width: 96px; height: 96;">
  <span style="position: absolute; padding: 32px 15px;">
    <i>Original post by <a href="http://twitter.com/">Steven Deobald</a> - check out <a href="http://blog.deobald.ca/">Hungry, horny, sleepy, curious.</a></i>
  </span>
</div>

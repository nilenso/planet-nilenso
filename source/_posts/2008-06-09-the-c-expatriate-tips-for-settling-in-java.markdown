---
title: "The C# expatriate: Tips for settling in Java."
kind: article
created_at: 2008-06-09 13:13:00 UTC
author: Steven Deobald
layout: post
---
Friday signaled the end of my first Java project in 6 years. Coming from a C#/.NET background, the learning curve was not steep -- but by the end of the project I had learned enough small lessons to serve as the basis for this little document.<br /><br />If you happen to move from a .NET project to a Java project, have a look through these pointers. This is all the advice I wish I had when I started this project six months ago.<br /><span style="font-weight: bold;"><br />1. Learn all your new tools, inside and out.</span><br /><br />As a C# developer, you're already utterly dependent on <a href="http://www.jetbrains.com/resharper/">ReSharper</a>. You will undoubtedly feel at home in IntelliJ. The majority of your day-to-day keyboard shortcuts will remain the same. Those that map directly map closely (CTRL+- is replaced with CTRL+ALT+LEFTARROW).<br /><br />However, ReSharper is a plug-in which makes .NET development tolerable. IntelliJ is a work of art -- and it makes programming a joy. Install the <a href="http://plugins.intellij.net/plugin/?id=1003">Key Promoter</a> plug-in and never look back.<br /><br /><span style="font-weight: bold;">2. Find New Tools</span><br /><br />As far as I know, nothing like <a href="http://www.panopticode.org/">Panopticode</a> exists for C#. <a href="http://code.google.com/p/google-guice/">Guice</a> almost certainly doesn't. Explore the landscape and enjoy the rich open source bibliotheque that we're missing on Microsoft-funded frameworks.<br /><br /><span style="font-weight: bold;">3. Testing and Mocking</span><br /><br />Use JUnit 4. Use <a href="http://code.google.com/p/mockito/">Mockito</a>. Try <a href="http://jbehave.org/">jBehave</a>.<br /><br /><span style="font-weight: bold;">4. Collections</span><br /><br />Eagerly write custom collections and provide yourself with methods for collecting, filtering, and all that other fun stuff. You can augment this with <a href="http://code.google.com/p/hamcrest-collections/">Hamcrest Collections</a>, but keep in mind it's still v0.1.<br /><br /><span style="font-weight: bold;"> 5. Other Wrappers</span><br /><br />Be even more aggressive about wrapping standard APIs than you would be in .NET. Why? Like collections, the .NET base class libraries have a (small) leg up on Java, thanks to watching Java grow and change. Because of this, you will periodically find features missing you might expect from the standard API. To be fair, once you've become accustomed to eagerly wrapping standard APIs in Java, carry that back to .NET with you. Chances are good you weren't wrapping enough stuff when you were last writing .NET. (I know I certainly wasn't.)<br /><br /><span style="font-weight: bold;">6. Dates and Times</span><br /><br />The Java DateTime libraries are beyond useless; use <a href="http://joda-time.sourceforge.net/">JodaTime </a>from day one. If anyone imports the JDK DateTime packages, fail the build. Joda comes with all the Hibernate jazz you need to persist Joda's DateTimes, so you're good there.<br /><br /><span style="font-weight: bold;">7. Apache Commons</span><br /><br />Use it. It rocks. When you go back to .NET, steal ideas.<div class="author">
  <img src="http://nilenso.com/people/steven-200.png" style="width: 96px; height: 96;">
  <span style="position: absolute; padding: 32px 15px;">
    <i>Original post by <a href="http://twitter.com/deobald">Steven Deobald</a> - check out <a href="http://blog.deobald.ca/">Hungry, horny, sleepy, curious.</a></i>
  </span>
</div>

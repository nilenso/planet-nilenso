---
title: "Proxy Pattern"
kind: article
created_at: 2012-06-30 07:22:00 UTC
author: Tejas Dinkar
layout: post
---
<h2>Problem Statement</h2> <p>I have a method which does something great, and is nice and small. It does everything i want, except some small feature that isn&#39;t core to the class. For example, I want to do some fudging for the input parameters and/or fudging the output parameters. I want to create another class to handle these orthogonal requirements.</p> <h2>TL;DR - Short summary</h2> <p>Wrap the original object in a proxy which looks like the original object to the outside world. Delegate calls to the original object eventually. This is an example of Aspect Oriented Programming.</p> <h2>Code Example</h2> <p>I&#39;m building this example up as a series of requirements</p> <p>Requirement 1: I want to be able to get my bank balance from the bank. <script src="https://gist.github.com/3022255.js?file=bank.rb"></script></p> <p>Requirement 2: I want to be able to log the fact someone has checked their bank balance <script src="https://gist.github.com/3022255.js?file=bank2.rb"></script></p> <p>Requirement 3: I want to tell everyone that their bank balance is double of what it is really. But logging should log the correct value. <script src="https://gist.github.com/3022255.js?file=bank3.rb"></script></p> <p>Requirement 4: I&#39;ve changed my mind. It&#39;s hard for me to have plausible deniability if i log actual bank balances. Fudge that as well <script src="https://gist.github.com/3022255.js?file=bank4.rb"></script></p> <p>Requirement 5: I want to cache the balance. I still expect logging and doubling. <script src="https://gist.github.com/3022255.js?file=bank5.rb"></script></p> <p>A note on the example: Requirement 3 (the doubling filter) should probably go into the first class, it&#39;s core to the business. I just made it a proxy filter to illustrate the point about output fudging.</p> <h2>Conditions for a good proxy</h2> <ul><li>The constructor accepts the item it is proxying.</li><li>The proxy passes requests to the original object in at least one branch of the code</li><li>The proxy honors all methods of the original object with the same signature (in java world, implements the same interface)</li><li>Proxies must be composable (this will follow from the point above): Proxy1.new(Proxy2.new(Proxy3.new(object)))</li><li>That does not mean the order of proxies is immaterial</li></ul> <h2>Practical Uses</h2> <ul><li>A proxy that caches the response from the inner method</li><li>A proxy that runs the inner method in a single database transaction</li><li>A proxy that adds logging before and after the method is called</li><li>A proxy that validates inputs</li></ul> <h2>DynamicProxy</h2> <p>In the examples above, we overrode a single method bank_balance. Now, imaging you want a proxy to overwrite 50 different methods of an object. Enter DynamicProxy for java, and DynamicProxy/SimpleProxy for .NET. These let you override all methods in a particular interface.</p> <p>Of course, ruby doesn&#39;t need that thanks to method_missing! <script src="https://gist.github.com/3022255.js?file=dynamicproxy.rb"></script></p> <h2>Rack filters</h2> <p>Rack provides an easy way to add proxy pattern to the app called via filters (rails cleans this up as around filters). A filter which does nothing will be as follows (notice what the constructor accepts, and what methods the filter implements) <script src="https://gist.github.com/3022255.js?file=rack.rb"></script></p> <h2>Further Reading</h2> <ul><li><a href="http://en.wikipedia.org/wiki/Proxy_pattern">http://en.wikipedia.org/wiki/Proxy_pattern</a></li><li><a href="http://en.wikipedia.org/wiki/Aspect-oriented_programming">http://en.wikipedia.org/wiki/Aspect-oriented_programming</a></li></ul><div class="author">
  <img src="http://nilenso.com/people/tejas-200.png" style="width: 96px; height: 96;">
  <span style="position: absolute; padding: 32px 15px;">
    <i>Original post by <a href="http://twitter.com/">Tejas Dinkar</a> - check out <a href="http://blog.gja.in/">Advice about nothing</a></i>
  </span>
</div>
